name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  code-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quality-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-quality-
          ${{ runner.os }}-pip-

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort pylint bandit mypy
        pip install -r requirements.txt

    - name: Run Black formatter check
      run: |
        black --check --diff *.py

    - name: Run isort import sorting check
      run: |
        isort --check-only --diff *.py

    - name: Run Flake8 linting
      run: |
        # E501: line too long (let black handle this)
        # W503: line break before binary operator (black style)
        flake8 *.py --max-line-length=88 --extend-ignore=E501,W503

    - name: Run Pylint
      run: |
        pylint *.py --disable=C0301,C0103,R0903,R0913,W0613,C0411 --fail-under=7.0
      continue-on-error: true

    - name: Run Bandit security linting
      run: |
        bandit -r *.py -f json -o bandit-report.json
      continue-on-error: true

    - name: Run MyPy type checking
      run: |
        mypy *.py --ignore-missing-imports --no-strict-optional
      continue-on-error: true

    - name: Upload Bandit report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-report
        path: bandit-report.json
        retention-days: 30

  documentation:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install pydocstyle

    - name: Check docstring style
      run: |
        pydocstyle *.py --convention=google
      continue-on-error: true

    - name: Check README links
      run: |
        # Basic check for README structure
        grep -q "## Installation" README.md && echo "✓ Installation section found" || echo "✗ Installation section missing"
        grep -q "## Usage" README.md && echo "✓ Usage section found" || echo "✗ Usage section missing"
        grep -q "## Features" README.md && echo "✓ Features section found" || echo "✗ Features section missing"