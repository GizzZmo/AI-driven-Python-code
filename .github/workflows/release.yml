name: Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel

    - name: Create setup.py if not exists
      run: |
        if [ ! -f setup.py ]; then
          cat > setup.py << 'EOF'
        from setuptools import setup, find_packages
        import re
        
        # Get version from tag
        version = "${{ github.ref_name }}"
        if version.startswith('v'):
            version = version[1:]
        
        with open("README.md", "r", encoding="utf-8") as fh:
            long_description = fh.read()
        
        with open("requirements.txt", "r", encoding="utf-8") as fh:
            requirements = [line.strip() for line in fh if line.strip() and not line.startswith("#")]
        
        setup(
            name="ai-driven-python-code",
            version=version,
            author="GizzZmo",
            description="AI-powered Python tools for cartoon generation, text processing, image analysis, and code assistance",
            long_description=long_description,
            long_description_content_type="text/markdown",
            url="https://github.com/GizzZmo/AI-driven-Python-code",
            py_modules=["CartoonGenerator", "TextGenerator", "ImageAnalyzer", "CodeAssistant", "examples"],
            classifiers=[
                "Development Status :: 3 - Alpha",
                "Intended Audience :: Developers",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.8",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
            ],
            python_requires=">=3.8",
            install_requires=requirements,
            keywords="ai, machine-learning, code-generation, image-analysis, text-generation",
        )
        EOF
        fi

    - name: Build package
      run: |
        python -m build

    - name: Check build artifacts
      run: |
        ls -la dist/
        python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-artifacts
        path: dist/
        retention-days: 30

    - name: Publish to PyPI
      if: github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*

  create-github-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: build-and-publish

    steps:
    - uses: actions/checkout@v4

    - name: Generate release notes
      run: |
        cat > release_notes.md << 'EOF'
        ## What's Changed
        
        This release includes updates to the AI-driven Python code toolkit.
        
        ### Features
        - CartoonGenerator: Advanced cartoon generation with customizable styles
        - TextGenerator: Multi-provider AI support for content generation
        - ImageAnalyzer: Comprehensive image analysis and processing
        - CodeAssistant: AI-powered code generation and review
        
        ### Installation
        ```bash
        pip install ai-driven-python-code
        ```
        
        ### Quick Start
        ```python
        from CartoonGenerator import CartoonGenerator
        from TextGenerator import TextGenerator
        from ImageAnalyzer import ImageAnalyzer
        from CodeAssistant import CodeAssistant
        
        # Initialize components
        generator = CartoonGenerator()
        text_gen = TextGenerator()
        analyzer = ImageAnalyzer()
        assistant = CodeAssistant()
        ```
        
        **Full Changelog**: https://github.com/GizzZmo/AI-driven-Python-code/compare/v0.0.0...${{ github.ref_name }}
        EOF

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-artifacts
        path: dist/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body_path: release_notes.md
        files: dist/*
        draft: false
        prerelease: false

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-publish

    steps:
    - uses: actions/checkout@v4

    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.10-slim
        
        WORKDIR /app
        
        # Copy requirements first for better caching
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Copy application files
        COPY *.py .
        COPY examples_output/ examples_output/
        
        # Create a non-root user
        RUN adduser --disabled-password --gecos '' appuser && \
            chown -R appuser:appuser /app
        USER appuser
        
        # Set default command
        CMD ["python", "examples.py"]
        EOF

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: gizzzmo/ai-driven-python-code
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'release' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max